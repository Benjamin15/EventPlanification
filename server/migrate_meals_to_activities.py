#!/usr/bin/env python3
"""
Migration pour transformer meals en activities
"""

import sqlite3
from datetime import datetime

def migrate_meals_to_activities():
    """Transforme la table meals en activities"""
    
    print("üîÑ Migration: Meals ‚Üí Activities")
    print("=" * 50)
    
    # Connexion √† la base de donn√©es
    conn = sqlite3.connect('chalet_vibe.db')
    cursor = conn.cursor()
    
    try:
        # 1. V√©rifier si la table activities existe d√©j√†
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='activities'
        """)
        
        if cursor.fetchone():
            print("‚úÖ Table activities existe d√©j√†")
            return
        
        # 2. Cr√©er la nouvelle table activities
        print("üìã Cr√©ation de la table activities...")
        cursor.execute("""
            CREATE TABLE activities (
                id INTEGER PRIMARY KEY,
                event_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                activity_type TEXT NOT NULL,
                date DATETIME,
                description TEXT,
                location TEXT,
                max_participants INTEGER,
                FOREIGN KEY (event_id) REFERENCES events (id)
            )
        """)
        
        # 3. Migrer les donn√©es existantes de meals vers activities
        print("üì¶ Migration des repas existants...")
        cursor.execute("SELECT * FROM meals")
        meals = cursor.fetchall()
        
        meal_type_mapping = {
            'breakfast': 'Petit-d√©jeuner',
            'lunch': 'D√©jeuner', 
            'dinner': 'D√Æner'
        }
        
        for meal in meals:
            meal_id, event_id, meal_type, date, description = meal
            
            # Convertir le type de repas en nom d'activit√©
            activity_name = meal_type_mapping.get(meal_type, meal_type.title())
            
            cursor.execute("""
                INSERT INTO activities (event_id, name, activity_type, date, description)
                VALUES (?, ?, ?, ?, ?)
            """, (event_id, activity_name, 'meal', date, description))
        
        print(f"‚úÖ {len(meals)} repas migr√©s vers activities")
        
        # 4. Cr√©er la table activity_assignments pour remplacer meal_assignments
        print("üìã Cr√©ation de la table activity_assignments...")
        cursor.execute("""
            CREATE TABLE activity_assignments (
                id INTEGER PRIMARY KEY,
                activity_id INTEGER NOT NULL,
                participant_id INTEGER NOT NULL,
                role TEXT,
                FOREIGN KEY (activity_id) REFERENCES activities (id),
                FOREIGN KEY (participant_id) REFERENCES participants (id)
            )
        """)
        
        # 5. Migrer meal_assignments vers activity_assignments
        print("üì¶ Migration des assignations...")
        cursor.execute("""
            SELECT ma.id, ma.meal_id, ma.participant_id, ma.role
            FROM meal_assignments ma
            JOIN meals m ON ma.meal_id = m.id
        """)
        assignments = cursor.fetchall()
        
        for assignment in assignments:
            _, meal_id, participant_id, role = assignment
            
            # Trouver l'activity_id correspondant au meal_id
            cursor.execute("""
                SELECT a.id FROM activities a
                JOIN meals m ON a.event_id = m.event_id AND a.date = m.date
                WHERE m.id = ?
            """, (meal_id,))
            
            result = cursor.fetchone()
            if result:
                activity_id = result[0]
                cursor.execute("""
                    INSERT INTO activity_assignments (activity_id, participant_id, role)
                    VALUES (?, ?, ?)
                """, (activity_id, participant_id, role))
        
        print(f"‚úÖ {len(assignments)} assignations migr√©es")
        
        # 6. Ajouter quelques activit√©s d'exemple
        print("üéØ Ajout d'activit√©s d'exemple...")
        sample_activities = [
            ('Randonn√©e matinale', 'sport', 'Randonn√©e dans les sentiers de montagne', 'Sentier des Cr√™tes'),
            ('Session kayak', 'sport', 'Kayak sur le lac', 'Lac de montagne'),
            ('Soir√©e jeux', 'leisure', 'Soir√©e jeux de soci√©t√© au chalet', 'Salon du chalet'),
            ('Visite village', 'tourism', 'D√©couverte du village local', 'Centre village'),
            ('Ap√©ritif', 'meal', 'Ap√©ritif de bienvenue', 'Terrasse du chalet')
        ]
        
        # Trouver un event_id existant pour les exemples
        cursor.execute("SELECT id FROM events LIMIT 1")
        event_result = cursor.fetchone()
        
        if event_result:
            event_id = event_result[0]
            base_date = datetime.now()
            
            for i, (name, activity_type, description, location) in enumerate(sample_activities):
                activity_date = base_date.replace(hour=10 + i*2, minute=0, second=0, microsecond=0)
                cursor.execute("""
                    INSERT INTO activities (event_id, name, activity_type, date, description, location)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (event_id, name, activity_type, activity_date.isoformat(), description, location))
            
            print(f"‚úÖ {len(sample_activities)} activit√©s d'exemple ajout√©es")
        
        # 7. Valider la migration
        print("\nüìä Validation de la migration...")
        cursor.execute("SELECT COUNT(*) FROM activities")
        activities_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM activity_assignments") 
        assignments_count = cursor.fetchone()[0]
        
        print(f"‚úÖ {activities_count} activit√©s dans la nouvelle table")
        print(f"‚úÖ {assignments_count} assignations migr√©es")
        
        # Commit les changements
        conn.commit()
        
        print("\nüéâ Migration r√©ussie!")
        print("üìã Nouvelles tables cr√©√©es:")
        print("   - activities (remplace meals)")
        print("   - activity_assignments (remplace meal_assignments)")
        print("\nüéØ Types d'activit√©s support√©s:")
        print("   - meal: Repas (petit-d√©j, d√©jeuner, d√Æner)")
        print("   - sport: Activit√©s sportives (randonn√©e, kayak, ski...)")
        print("   - leisure: Loisirs (jeux, lecture, repos...)")
        print("   - tourism: Tourisme (visites, excursions...)")
        print("   - other: Autres activit√©s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        conn.rollback()
        raise
    finally:
        conn.close()

if __name__ == "__main__":
    print("üöÄ Migration Base de Donn√©es: Meals ‚Üí Activities")
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    migrate_meals_to_activities()
