#!/usr/bin/env python3
"""
Test complet de la fonctionnalit√© de co√ªt de location des voitures
"""
import requests
import json
import sys

BASE_URL = "http://localhost:8000"

def test_rental_cost_feature():
    """Test de l'ajout et du calcul des co√ªts de location"""
    print("üöó Test de la fonctionnalit√© co√ªt de location")
    print("=" * 50)
    
    # 1. R√©cup√©rer un √©v√©nement existant
    print("1. R√©cup√©ration d'un √©v√©nement...")
    try:
        events_response = requests.get(f"{BASE_URL}/events")
        if events_response.status_code != 200:
            print("‚ùå Impossible de r√©cup√©rer les √©v√©nements")
            return False
            
        events = events_response.json()
        if not events:
            print("‚ùå Aucun √©v√©nement trouv√©")
            return False
            
        event_id = events[0]["id"]
        print(f"‚úÖ √âv√©nement trouv√©: ID {event_id}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements: {e}")
        return False
    
    # 2. Ajouter une voiture avec co√ªt de location
    print("\n2. Ajout d'une voiture avec co√ªt de location...")
    car_data = {
        "event_id": event_id,
        "driver_name": "Test Location",
        "license_plate": "LOC-123-TEST",
        "max_passengers": 4,
        "fuel_cost": 75.0,
        "rental_cost": 150.0  # Co√ªt de location
    }
    
    try:
        car_response = requests.post(f"{BASE_URL}/events/{event_id}/cars", json=car_data)
        if car_response.status_code != 200:
            print(f"‚ùå Erreur lors de l'ajout de la voiture: {car_response.status_code}")
            print(car_response.text)
            return False
            
        car = car_response.json()
        car_id = car["id"]
        print(f"‚úÖ Voiture ajout√©e avec succ√®s: ID {car_id}")
        print(f"   - Carburant: {car['fuel_cost']}$")
        print(f"   - Location: {car.get('rental_cost', 'N/A')}$")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout de la voiture: {e}")
        return False
    
    # 3. V√©rifier les calculs de co√ªts
    print("\n3. V√©rification des calculs de co√ªts...")
    try:
        costs_response = requests.get(f"{BASE_URL}/events/{event_id}/costs")
        if costs_response.status_code != 200:
            print(f"‚ùå Erreur lors du calcul des co√ªts: {costs_response.status_code}")
            return False
            
        costs = costs_response.json()
        print("‚úÖ Calculs de co√ªts:")
        print(f"   - Courses: {costs['total_shopping']}$")
        print(f"   - Carburant: {costs['total_fuel']}$")
        print(f"   - Location: {costs['total_rental']}$")
        print(f"   - Transport total: {costs['total_transport']}$")
        print(f"   - Co√ªt total: {costs['total_cost']}$")
        print(f"   - Par personne: {costs['cost_per_person']}$")
        
        # V√©rifier que le co√ªt de location est inclus
        if costs['total_rental'] >= 150.0:
            print("‚úÖ Co√ªt de location correctement inclus")
        else:
            print("‚ùå Co√ªt de location manquant ou incorrect")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des co√ªts: {e}")
        return False
    
    # 4. R√©cup√©rer la liste des voitures pour v√©rifier l'affichage
    print("\n4. V√©rification de l'affichage des voitures...")
    try:
        cars_response = requests.get(f"{BASE_URL}/events/{event_id}/cars")
        if cars_response.status_code != 200:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des voitures: {cars_response.status_code}")
            return False
            
        cars = cars_response.json()
        rental_car = next((car for car in cars if car["id"] == car_id), None)
        
        if rental_car:
            print(f"‚úÖ Voiture avec location trouv√©e:")
            print(f"   - {rental_car['license_plate']} - {rental_car['driver_name']}")
            print(f"   - Carburant: {rental_car['fuel_cost']}$")
            print(f"   - Location: {rental_car.get('rental_cost', 'N/A')}$")
        else:
            print("‚ùå Voiture avec location non trouv√©e")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des voitures: {e}")
        return False
    
    print("\nüéâ Test de la fonctionnalit√© co√ªt de location r√©ussi!")
    return True

def cleanup_test_data():
    """Nettoie les donn√©es de test"""
    print("\nüßπ Nettoyage des donn√©es de test...")
    try:
        # R√©cup√©rer les √©v√©nements
        events_response = requests.get(f"{BASE_URL}/events")
        if events_response.status_code == 200:
            events = events_response.json()
            for event in events:
                # R√©cup√©rer les voitures de test
                cars_response = requests.get(f"{BASE_URL}/events/{event['id']}/cars")
                if cars_response.status_code == 200:
                    cars = cars_response.json()
                    for car in cars:
                        if car.get("license_plate") == "LOC-123-TEST":
                            # Supprimer la voiture de test
                            delete_response = requests.delete(f"{BASE_URL}/cars/{car['id']}")
                            if delete_response.status_code == 200:
                                print(f"‚úÖ Voiture de test supprim√©e: {car['license_plate']}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors du nettoyage: {e}")

if __name__ == "__main__":
    print("üß™ Test de la fonctionnalit√© co√ªt de location")
    print("Assurez-vous que le serveur backend est d√©marr√© sur http://localhost:8000")
    print()
    
    # Ex√©cuter le test
    success = test_rental_cost_feature()
    
    # Nettoyer les donn√©es de test
    cleanup_test_data()
    
    # R√©sultat final
    if success:
        print("\n‚úÖ Tous les tests sont pass√©s!")
        sys.exit(0)
    else:
        print("\n‚ùå Certains tests ont √©chou√©!")
        sys.exit(1)
